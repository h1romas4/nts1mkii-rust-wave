diff --git a/platform/nts-1_mkii/common/fx_api.h b/platform/nts-1_mkii/common/fx_api.h
index ecd09f7..65de7e1 100644
--- a/platform/nts-1_mkii/common/fx_api.h
+++ b/platform/nts-1_mkii/common/fx_api.h
@@ -121,7 +121,7 @@ extern "C" {
    * @param   x  Phase ratio
    * @return     Result of sin(2*pi*x).
    */
-  static fast_inline float fx_sinf(float x) {
+   float fx_sinf(float x) {
     const float p = x - (uint32_t)x;
     
     // half period stored -- wrap around and invert
@@ -141,7 +141,7 @@ extern "C" {
    * @param   x  Phase ratio.
    * @return     Result of sin(2*pi*x).
    */
-  static fast_inline float fx_sinuf(uint32_t x) {
+   float fx_sinuf(uint32_t x) {
     (void)x;
     return 0.f;
   }
@@ -152,7 +152,7 @@ extern "C" {
    * @param   x  Value in [0, 1.0].
    * @return     Result of cos(2*pi*x).
    */
-  static fast_inline float fx_cosf(float x) {
+   float fx_cosf(float x) {
     return fx_sinf(x+0.25f);
   }
 
@@ -162,7 +162,7 @@ extern "C" {
    * @param   x  Phase ratio.
    * @return     Result of sin(2*pi*x).
    */
-  static fast_inline float fx_cosuf(uint32_t x) {
+   float fx_cosuf(uint32_t x) {
     return fx_sinuf(x+((k_wt_sine_size>>2)<<k_wt_sine_u32shift));
   }
   
@@ -192,7 +192,7 @@ extern "C" {
    * @return     Result of log(x).
    * @note Not checking input, caller responsible for bounding x.
    */
-  static fast_inline float fx_logf(float x) {
+   float fx_logf(float x) {
     const float idxf = x * k_log_size;
     const uint32_t idx = (uint32_t)idxf;
     const float y0 = log_lut_f[idx];
@@ -215,7 +215,7 @@ extern "C" {
    * @return     Result of tan(pi*x).
    * @note Not checking input, caller responsible for bounding x.
    */
-  static fast_inline float fx_tanpif(float x) {
+   float fx_tanpif(float x) {
     const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
     const uint32_t idx = (uint32_t)idxf;
     const float y0 = tanpi_lut_f[idx];
@@ -239,7 +239,7 @@ extern "C" {
    * @return     Result of sqrt(-2*log(x)).
    * @note Not checking input, caller responsible for bounding x.
    */
-  static fast_inline float fx_sqrtm2logf(float x) {
+   float fx_sqrtm2logf(float x) {
     const float idxf = (x-k_sqrtm2log_base) * k_sqrtm2log_range_recip * k_sqrtm2log_size;
     const uint32_t idx = (uint32_t)idxf;
     const float y0 = sqrtm2log_lut_f[idx];
@@ -262,7 +262,7 @@ extern "C" {
    * @return     Result of 2^k.
    * @note Not checking input, caller responsible for bounding x.
    */
-  static fast_inline float fx_pow2f(float x) {
+   float fx_pow2f(float x) {
     const float idxf = x * k_pow2_scale;
     const uint32_t idx = (uint32_t)idxf;
     const float y0 = pow2_lut_f[idx];
@@ -289,7 +289,7 @@ extern "C" {
    * @param   x  Value in (-inf, +inf).
    * @return     Clipped value in [-(1-c), (1-c)].
    */
-  static fast_inline float fx_softclipf(const float c, float x)
+   float fx_softclipf(const float c, float x)
   {
     x = clip1m1f(x);
     return x - c * (x*x*x);
@@ -308,7 +308,7 @@ extern "C" {
    * @param   x  Value in [-1.0, 1.0].
    * @return     Cubic curve above 0.42264973081, gain: 1.2383127573
    */
-  static fast_inline float fx_sat_cubicf(float x) {
+   float fx_sat_cubicf(float x) {
     const float xf = si_fabsf(clip1f(x)) * k_cubicsat_size;
     const uint32_t xi = (uint32_t)x;
     const float y0 = cubicsat_lut_f[xi];
@@ -329,7 +329,7 @@ extern "C" {
    * @param   x  Value in [-1.0, 1.0].
    * @return     Saturated value.
    */
-  static fast_inline float fx_sat_schetzenf(float x) {
+   float fx_sat_schetzenf(float x) {
     const float xf = si_fabsf(clip1f(x)) * k_schetzen_size;
     const uint32_t xi = (uint32_t)x;
     const float y0 = schetzen_lut_f[xi];
@@ -359,7 +359,7 @@ extern "C" {
    * @return     Quantization scaling factor.
    * @note       Fractional bit depth, exponentially mapped, 1 to 24 bits.
    */
-  static fast_inline float fx_bitresf(float x) {
+   float fx_bitresf(float x) {
     const float xf = x * k_bitres_size;
     const uint32_t xi = (uint32_t)xf;
     const float y0 = bitres_lut_f[xi];
diff --git a/platform/nts-1_mkii/common/osc_api.h b/platform/nts-1_mkii/common/osc_api.h
index 147cf78..1fc23ab 100644
--- a/platform/nts-1_mkii/common/osc_api.h
+++ b/platform/nts-1_mkii/common/osc_api.h
@@ -107,7 +107,7 @@ extern "C" {
    * @param note Note in [0-151] range.
    * @return     Corresponding Hertz value.
    */
-  static fast_inline float osc_notehzf(uint8_t note) {
+   float osc_notehzf(uint8_t note) {
     return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
   }
 
@@ -117,7 +117,7 @@ extern "C" {
    * @param note Note in [0-151] range, mod in [0-255] range.
    * @return     Corresponding 0-1 phase increment in floating point.
    */
-  static fast_inline float osc_w0f_for_note(uint8_t note, uint8_t mod) {    
+   float osc_w0f_for_note(uint8_t note, uint8_t mod) {    
     const float f0 = osc_notehzf(note);
     const float f1 = osc_notehzf(note+1);
     
@@ -149,7 +149,7 @@ extern "C" {
    * @param   x  Phase ratio
    * @return     Result of sin(2*pi*x).
    */
-  static fast_inline float osc_sinf(float x) {
+   float osc_sinf(float x) {
     const float p = x - (uint32_t)x;
     
     // half period stored -- wrap around and invert
@@ -169,7 +169,7 @@ extern "C" {
    * @param   x  Value in [0, 1.0].
    * @return     Result of cos(2*pi*x).
    */
-  static fast_inline float osc_cosf(float x) {
+   float osc_cosf(float x) {
     return osc_sinf(x+0.25f);
   }
   
@@ -201,7 +201,7 @@ extern "C" {
    * @param   x  Phase in [0, 1.0].
    * @return     Wave sample.
    */
-  static fast_inline float osc_sawf(float x) {
+   float osc_sawf(float x) {
     const float p = x - (uint32_t)x;
     
     const float x0f = 2.f * p * k_wt_saw_size;
@@ -226,7 +226,7 @@ extern "C" {
    * @param   idx   Wave index in [0,6].
    * @return        Wave sample.
    */
-  static fast_inline float osc_bl_sawf(float x, uint8_t idx) {
+   float osc_bl_sawf(float x, uint8_t idx) {
     const float p = x - (uint32_t)x;
     
     const float x0f = 2.f * p * k_wt_saw_size;
@@ -251,7 +251,7 @@ extern "C" {
    * @param   idx   Fractional wave index in [0,6].
    * @return        Wave sample.
    */
-  static fast_inline float osc_bl2_sawf(float x, float idx) {
+   float osc_bl2_sawf(float x, float idx) {
     const float p = x - (uint32_t)x;
     
     const float x0f = 2.f * p * k_wt_saw_size;
@@ -309,7 +309,7 @@ extern "C" {
    * @return     Wave sample.
    * @note Not checking input, caller responsible for bounding x.
    */
-  static fast_inline float osc_sqrf(float x) {
+   float osc_sqrf(float x) {
     const float p = x - (uint32_t)x;
     
     const float x0f = 2.f * p * k_wt_sqr_size;
@@ -335,7 +335,7 @@ extern "C" {
    * @return        Wave sample.
    * @note Not checking input, caller responsible for bounding x and idx.
    */
-  static fast_inline float osc_bl_sqrf(float x, uint8_t idx) {
+   float osc_bl_sqrf(float x, uint8_t idx) {
     const float p = x - (uint32_t)x;
     
     const float x0f = 2.f * p * k_wt_sqr_size;
@@ -361,7 +361,7 @@ extern "C" {
    * @return        Wave sample.
    * @note Not checking input, caller responsible for bounding x and idx.
    */
-  static fast_inline float osc_bl2_sqrf(float x, float idx) {
+   float osc_bl2_sqrf(float x, float idx) {
     const float p = x - (uint32_t)x;
     
     const float x0f = 2.f * p * k_wt_sqr_size;
@@ -420,7 +420,7 @@ extern "C" {
    * @return     Wave sample.
    * @note Not checking input, caller responsible for bounding x.
    */
-  static fast_inline float osc_parf(float x) {
+   float osc_parf(float x) {
     const float p = x - (uint32_t)x;
 
     const float x0f = 2.f * p * k_wt_par_size;
@@ -440,7 +440,7 @@ extern "C" {
    * @return        Wave sample.
    * @note Not checking input, caller responsible for bounding x and idx.
    */
-  static fast_inline float osc_bl_parf(float x, uint8_t idx) {
+   float osc_bl_parf(float x, uint8_t idx) {
     const float p = x - (uint32_t)x;
 
     const float x0f = 2.f * p * k_wt_par_size;
@@ -462,7 +462,7 @@ extern "C" {
    * @return        Wave sample.
    * @note Not checking input, caller responsible for bounding x and idx.
    */
-  static fast_inline float osc_bl2_parf(float x, float idx) {
+   float osc_bl2_parf(float x, float idx) {
     const float p = x - (uint32_t)x;
 
     const float x0f = 2.f * p * k_wt_par_size;
@@ -534,7 +534,7 @@ extern "C" {
   
   extern const float * const wavesF[k_waves_f_cnt];
   
-  static inline __attribute__((always_inline, optimize("Ofast")))
+  
   float osc_wave_scanf(const float *w, float x) {
     const float p = x - (uint32_t)x;
     const float x0f = p * k_waves_size;
@@ -543,7 +543,7 @@ extern "C" {
     return linintf(x0f - (uint32_t)x0f, w[x0], w[x1]);
   }
 
-  static inline __attribute__((always_inline, optimize("Ofast")))
+  
   float osc_wave_scanuf(const float *w, uint32_t x) {
     const uint32_t x0 = (x>>k_waves_u32shift);
     const uint32_t x1 = (x0 + 1) & k_waves_mask;
@@ -577,7 +577,7 @@ extern "C" {
    * @return     Result of log(x).
    * @note Not checking input, caller responsible for bounding x.
    */
-  static fast_inline float osc_logf(float x) {
+   float osc_logf(float x) {
     const float idxf = x * k_log_size;
     const uint32_t idx = (uint32_t)idxf;
     const float y0 = log_lut_f[idx];
@@ -600,7 +600,7 @@ extern "C" {
    * @return     Result of tan(pi*x).
    * @note Not checking input, caller responsible for bounding x.
    */
-  static fast_inline float osc_tanpif(float x) {
+   float osc_tanpif(float x) {
     const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
     const uint32_t idx = (uint32_t)idxf;
     const float y0 = tanpi_lut_f[idx];
@@ -624,7 +624,7 @@ extern "C" {
    * @return     Result of sqrt(-2*log(x)).
    * @note Not checking input, caller responsible for bounding x.
    */
-  static fast_inline float osc_sqrtm2logf(float x) {
+   float osc_sqrtm2logf(float x) {
     const float idxf = (x-k_sqrtm2log_base) * k_sqrtm2log_range_recip * k_sqrtm2log_size;
     const uint32_t idx = (uint32_t)idxf;
     const float y0 = sqrtm2log_lut_f[idx];
@@ -651,7 +651,7 @@ extern "C" {
    * @param   x  Value in (-inf, +inf).
    * @return     Clipped value in [-(1-c), (1-c)].
    */
-  static fast_inline float osc_softclipf(const float c, float x)
+   float osc_softclipf(const float c, float x)
   {
     x = clip1m1f(x);
     return x - c * (x*x*x);
@@ -670,7 +670,7 @@ extern "C" {
    * @param   x  Value in [-1.0, 1.0].
    * @return     Cubic curve above 0.42264973081, gain: 1.2383127573
    */
-  static fast_inline float osc_sat_cubicf(float x) {
+   float osc_sat_cubicf(float x) {
     const float xf = si_fabsf(clip1f(x)) * k_cubicsat_size;
     const uint32_t xi = (uint32_t)x;
     const float y0 = cubicsat_lut_f[xi];
@@ -691,7 +691,7 @@ extern "C" {
    * @param   x  Value in [-1.0, 1.0].
    * @return     Saturated value.
    */
-  static fast_inline float osc_sat_schetzenf(float x) {
+   float osc_sat_schetzenf(float x) {
     const float xf = si_fabsf(clip1f(x)) * k_schetzen_size;
     const uint32_t xi = (uint32_t)x;
     const float y0 = schetzen_lut_f[xi];
@@ -721,7 +721,7 @@ extern "C" {
    * @return     Quantization scaling factor.
    * @note       Fractional bit depth, exponentially mapped, 1 to 24 bits.
    */
-  static fast_inline float osc_bitresf(float x) {
+   float osc_bitresf(float x) {
     const float xf = x * k_bitres_size;
     const uint32_t xi = (uint32_t)xf;
     const float y0 = bitres_lut_f[xi];
diff --git a/platform/nts-1_mkii/common/utils/buffer_ops.h b/platform/nts-1_mkii/common/utils/buffer_ops.h
index d20028d..154ebfc 100644
--- a/platform/nts-1_mkii/common/utils/buffer_ops.h
+++ b/platform/nts-1_mkii/common/utils/buffer_ops.h
@@ -59,7 +59,6 @@
 
 /** Buffer-wise Q31 to float conversion
  */
-static inline __attribute__((optimize("Ofast"),always_inline))
 void buf_q31_to_f32(const q31_t *q31,
                     float * __restrict__ flt,
                     const size_t len)
@@ -76,7 +75,6 @@ void buf_q31_to_f32(const q31_t *q31,
 
 /** Buffer-wise float to Q31 conversion
  */
-static inline __attribute__((optimize("Ofast"),always_inline))
 void buf_f32_to_q31(const float *flt,
                     q31_t * __restrict__ q31,
                     const size_t len)
@@ -100,7 +98,6 @@ void buf_f32_to_q31(const float *flt,
 
 /** Buffer clear (float version)
  */
-static inline __attribute__((optimize("Ofast"),always_inline))
 void buf_clr_f32(float * __restrict__ ptr,
                  const uint32_t len)
 {
@@ -116,7 +113,6 @@ void buf_clr_f32(float * __restrict__ ptr,
 
 /** Buffer clear (32bit unsigned integer version).
  */
-static inline __attribute__((optimize("Ofast"),always_inline))
 void buf_clr_u32(uint32_t * __restrict__ ptr,
                  const size_t len)
 {
@@ -139,7 +135,6 @@ void buf_clr_u32(uint32_t * __restrict__ ptr,
 
 /** Buffer copy (float version).
  */
-static inline __attribute__((optimize("Ofast"),always_inline))
 void buf_cpy_f32(const float *src,
                  float * __restrict__ dst,
                  const size_t len)
@@ -156,7 +151,6 @@ void buf_cpy_f32(const float *src,
 
 /** Buffer copy (32bit unsigned integer version).
  */
-static inline __attribute__((optimize("Ofast"),always_inline))
 void buf_cpy_u32(const uint32_t *src,
                  uint32_t * __restrict__ dst,
                  const size_t len)
diff --git a/platform/nts-1_mkii/common/utils/fixed_math.h b/platform/nts-1_mkii/common/utils/fixed_math.h
index 4a3e646..6dc794f 100644
--- a/platform/nts-1_mkii/common/utils/fixed_math.h
+++ b/platform/nts-1_mkii/common/utils/fixed_math.h
@@ -190,7 +190,6 @@ typedef uint64_t uq64_0_t;
 
 /** Maximum
  */
-static inline __attribute__((optimize("Ofast"),always_inline))
 q15_t q15max(q15_t a, q15_t b) {
   qsub16(a,b);
   return sel(a,b);
@@ -198,7 +197,6 @@ q15_t q15max(q15_t a, q15_t b) {
 
 /** Minimum
  */
-static inline __attribute__((optimize("Ofast"),always_inline))
 q15_t q15min(q15_t a, q15_t b) {
   qsub16(b,a);
   return sel(a,b);
@@ -210,7 +208,6 @@ q15_t q15min(q15_t a, q15_t b) {
 
 /** Maximum
  */
-static inline __attribute__((optimize("Ofast"),always_inline))
 simd32_t q15maxp(simd32_t a, simd32_t b) {
   qsub16(a,b);
   return sel(a,b);
@@ -218,7 +215,6 @@ simd32_t q15maxp(simd32_t a, simd32_t b) {
 
 /** Minimum
  */
-static inline __attribute__((optimize("Ofast"),always_inline))
 simd32_t q15minp(simd32_t a, simd32_t b) {
   qsub16(b,a);
   return sel(a,b);
@@ -240,7 +236,6 @@ simd32_t q15minp(simd32_t a, simd32_t b) {
 
 /** Maximum
  */
-static inline __attribute__((optimize("Ofast"),always_inline))
 q31_t q31max(q31_t a, q31_t b) {
   qsub(a,b);
   return sel(a,b);
@@ -248,7 +243,6 @@ q31_t q31max(q31_t a, q31_t b) {
 
 /** Minimum
  */
-static inline __attribute__((optimize("Ofast"),always_inline))
 q31_t q31min(q31_t a, q31_t b) {
   qsub(b,a);
   return sel(a,b);
diff --git a/platform/nts-1_mkii/common/utils/float_math.h b/platform/nts-1_mkii/common/utils/float_math.h
index b05e136..1a50b3a 100644
--- a/platform/nts-1_mkii/common/utils/float_math.h
+++ b/platform/nts-1_mkii/common/utils/float_math.h
@@ -170,7 +170,6 @@ typedef struct {
 
 /** Make a float pair.
  */
-static inline __attribute__((optimize("Ofast"),always_inline))
 f32pair_t f32pair(const float a, const float b) {
   return (f32pair_t){a, b};
 }
@@ -188,77 +187,66 @@ f32pair_t f32pair(const float a, const float b) {
 
 /** FSEL construct
  */
-static inline __attribute__((optimize("Ofast"),always_inline))
 float fsel(const float a, const float b, const float c) {
   return (a >= 0) ? b : c;
 }
 
 /** FSEL boolean construct
  */
-static inline __attribute__((optimize("Ofast"),always_inline))
 uint8_t fselb(const float a) {
   return (a >= 0) ? 1 : 0;
 }
 
 /** Sign bit check.
  */
-static inline __attribute__((always_inline))
 uint8_t float_is_neg(const f32_t f) {
   return (f.i >> 31) != 0;
 }
 
 /** Obtain mantissa
  */
-static inline __attribute__((always_inline))
 int32_t float_mantissa(f32_t f) {
   return f.i & ((1 << 23) - 1);
 }
 
 /** Obtain exponent
  */
-static inline __attribute__((always_inline))
 int32_t float_exponent(f32_t f) {
   return (f.i >> 23) & 0xFF;
 }
 
 /** Pair-wise addition
  */
-static inline __attribute__((optimize("Ofast"),always_inline))
 f32pair_t f32pair_add(const f32pair_t p0, const f32pair_t p1) {
   return (f32pair_t){p0.a + p1.a, p0.b + p1.b};
 }
 
 /** Pair-wise subtraction
  */
-static inline __attribute__((optimize("Ofast"),always_inline))
 f32pair_t f32pair_sub(const f32pair_t p0, const f32pair_t p1) {
   return (f32pair_t){p0.a - p1.a, p0.b - p1.b};
 }
 
 /** Pair-wise scalar addition
  */
-static inline __attribute__((optimize("Ofast"),always_inline))
 f32pair_t f32pair_addscal(const f32pair_t p, const float scl) {
   return (f32pair_t){p.a + scl, p.b + scl};
 }
 
 /** Pair-wise product
  */
-static inline __attribute__((optimize("Ofast"),always_inline))
 f32pair_t f32pair_mul(const f32pair_t p0, const f32pair_t p1) {
   return (f32pair_t){p0.a * p1.a, p0.b * p1.b};
 }
 
 /** Pair-wise scalar product
  */
-static inline __attribute__((optimize("Ofast"),always_inline))
 f32pair_t f32pair_mulscal(const f32pair_t p, const float scl) {
   return (f32pair_t){p.a * scl, p.b * scl};
 }
 
 /** Pair-wise linear interpolation
  */
-static inline __attribute__((optimize("Ofast"),always_inline))
 f32pair_t f32pair_linint(const float fr, const f32pair_t p0, const f32pair_t p1) {
   const float frinv = 1.f - fr;
   return (f32pair_t){ frinv * p0.a + fr * p1.a, frinv * p0.b + fr * p1.b };
@@ -266,7 +254,6 @@ f32pair_t f32pair_linint(const float fr, const f32pair_t p0, const f32pair_t p1)
 
 /** Return x with sign of y applied
  */
-static inline __attribute__((optimize("Ofast"),always_inline))
 float si_copysignf(const float x, const float y)
 {
   f32_t xs = {x};
@@ -280,7 +267,6 @@ float si_copysignf(const float x, const float y)
 
 /** Absolute value
  */
-static inline __attribute__((optimize("Ofast"),always_inline))
 float si_fabsf(float x)
 {
   f32_t xs = {x};
@@ -290,7 +276,6 @@ float si_fabsf(float x)
 
 /** Floor function
  */
-static inline __attribute__((optimize("Ofast"),always_inline))
 float si_floorf(float x)
 {
   return (float)((uint32_t)x);
@@ -298,7 +283,6 @@ float si_floorf(float x)
 
 /** Ceiling function
  */
-static inline __attribute__((optimize("Ofast"),always_inline))
 float si_ceilf(float x)
 {
   return (float)((uint32_t)x + 1);
@@ -306,26 +290,22 @@ float si_ceilf(float x)
 
 /** Round to nearest integer.
  */
-static inline __attribute__((optimize("Ofast"),always_inline))
 float si_roundf(float x)
 {
   return (float)((int32_t)(x + si_copysignf(0.5f,x)));
 }
 
-static inline __attribute__((optimize("Ofast"), always_inline))
 float clampfsel(const float min, float x, const float max)
 {
   x = fsel(x - min, x, min);
   return fsel(x - max, max, x);
 }
 
-static inline __attribute__((optimize("Ofast"), always_inline))
 float clampminfsel(const float min, const float x)
 {
   return fsel(x - min, x, min);
 }
 
-static inline __attribute__((optimize("Ofast"), always_inline))
 float clampmaxfsel(const float x, const float max)
 {
   return fsel(x - max, max, x);
@@ -335,49 +315,41 @@ float clampmaxfsel(const float x, const float max)
 
 /** Clip upper bound of x to m (inclusive)
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float clipmaxf(const float x, const float m)
 { return (((x)>=m)?m:(x)); }
 
 /** Clip lower bound of x to m (inclusive)
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float clipminf(const float  m, const float x)
 { return (((x)<=m)?m:(x)); }
 
 /** Clip x to min and max (inclusive)
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float clipminmaxf(const float min, const float x, const float max)
 { return (((x)>=max)?max:((x)<=min)?min:(x)); }
 
 /** Clip lower bound of x to 0.f (inclusive)
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float clip0f(const float x)
 { return (((x)<0.f)?0.f:(x)); }
 
 /** Clip upper bound of x to 1.f (inclusive)
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float clip1f(const float x)
 { return (((x)>1.f)?1.f:(x)); }
 
 /** Clip x to [0.f, 1.f] (inclusive)
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float clip01f(const float x)
 { return (((x)>1.f)?1.f:((x)<0.f)?0.f:(x)); }
 
 /** Clip lower bound of x to -1.f (inclusive)
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float clipm1f(const float x)
 { return (((x)<-1.f)?-1.f:(x)); }
 
 /** Clip x to [-1.f, 1.f] (inclusive)
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float clip1m1f(const float x)
 { return (((x)>1.f)?1.f:((x)<-1.f)?-1.f:(x)); }
 
@@ -385,49 +357,41 @@ float clip1m1f(const float x)
 
 /** Clip upper bound of x to m (inclusive)
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float clipmaxf(const float x, const float m)
 { return clampmaxfsel(x, m); }
 
 /** Clip lower bound of x to m (inclusive)
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float clipminf(const float  m, const float x)
 { return clampminfsel(m, x); }
 
 /** Clip x to min and max (inclusive)
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float clipminmaxf(const float min, const float x, const float max)
 { return clampfsel(min, x, max); }
 
 /** Clip lower bound of x to 0.f (inclusive)
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float clip0f(const float x)
 { return clampminfsel(0, x); }
 
 /** Clip upper bound of x to 1.f (inclusive)
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float clip1f(const float x)
 { return clampmaxfsel(x, 1); }
 
 /** Clip x to [0.f, 1.f] (inclusive)
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float clip01f(const float x)
 { return clampfsel(0, x, 1); }
 
 /** Clip lower bound of x to -1.f (inclusive)
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float clipm1f(const float x)
 { return clampminfsel(-1, x); }
 
 /** Clip x to [-1.f, 1.f] (inclusive)
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float clip1m1f(const float x)
 { return clampfsel(-1, x, 1); }
 
@@ -495,7 +459,6 @@ float clip1m1f(const float x)
 /** "Fast" sine approximation, valid for x in [-M_PI, M_PI]
  * @note Adapted from Paul Mineiro's FastFloat
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float fastsinf(float x) {
   static const float q = 0.78444488374548933f;
   union { float f; uint32_t i; } p = { 0.20363937680730309f };
@@ -520,7 +483,6 @@ float fastsinf(float x) {
  * @note Adapted from Paul Mineiro's FastFloat
  * @note Warning: can be slower than libc version!
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float fastersinf(float x) {
   static const float q = 0.77633023248007499f;
   union { float f; uint32_t i; } p = { 0.22308510060189463f };
@@ -535,7 +497,6 @@ float fastersinf(float x) {
 /** "Fast" sine approximation, valid on full x domain
  * @note Adapted from Paul Mineiro's FastFloat
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float fastsinfullf(float x) {
   const int32_t k = (int32_t)(x * M_1_TWOPI);
   const float half = (x < 0) ? -0.5f : 0.5f;
@@ -545,7 +506,6 @@ float fastsinfullf(float x) {
 /** "Faster" sine approximation, valid on full x domain
  * @note Adapted from Paul Mineiro's FastFloat
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float fastersinfullf(float x) {
   const int32_t k = (int32_t)(x * M_1_TWOPI);
   const float half = (x < 0) ? -0.5f : 0.5f;
@@ -555,7 +515,6 @@ float fastersinfullf(float x) {
 /** "Fast" cosine approximation, valid for x in [-M_PI, M_PI]
  * @note Adapted from Paul Mineiro's FastFloat
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float fastcosf(float x) {
   const float halfpiminustwopi = -4.7123889803846899f;
   float offset = (x > M_PI_2) ? halfpiminustwopi : M_PI_2;
@@ -565,7 +524,6 @@ float fastcosf(float x) {
 /** "Faster" cosine approximation, valid for x in [-M_PI, M_PI]
  * @note Adapted from Paul Mineiro's FastFloat
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float fastercosf(float x) {
   static const float p = 0.54641335845679634f;
   union { float f; uint32_t i; } vx = { x };
@@ -578,7 +536,6 @@ float fastercosf(float x) {
  * @note Adapted from Paul Mineiro's FastFloat
  * @note Warning: can be slower than libc version!
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float fastcosfullf(float x) {
   return fastersinfullf(x + M_PI_2);
 }
@@ -586,7 +543,6 @@ float fastcosfullf(float x) {
 /** "Faster" cosine approximation, valid on full x domain
  * @note Adapted from Paul Mineiro's FastFloat
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float fastercosfullf(float x) {
   return fastersinfullf(x + M_PI_2);
 }
@@ -594,7 +550,6 @@ float fastercosfullf(float x) {
 /** "Fast" tangent approximation, valid for x in [-M_PI_2, M_PI_2]
  * @note Adapted from Paul Mineiro's FastFloat
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float fasttanf(float x) {
   return fastsinf(x) / fastsinf(x + M_PI_2);
 }
@@ -602,7 +557,6 @@ float fasttanf(float x) {
 /** "Faster" tangent approximation, valid for x in [-M_PI_2, M_PI_2]
  * @note Adapted from Paul Mineiro's FastFloat
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float fastertanf(float x) {
   return fastcosf(x) / fastercosf(x);
 }
@@ -611,7 +565,6 @@ float fastertanf(float x) {
  * @note Adapted from Paul Mineiro's FastFloat
  * @note Warning: can be slower than libc version!
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float fasttanfullf(float x) {
   const int32_t k = (int32_t)(x * M_1_TWOPI);
   const float half = (x < 0) ? -0.5f : 0.5f;
@@ -622,7 +575,6 @@ float fasttanfullf(float x) {
 /** "Faster" tangent approximation, valid on full x domain, except where tangent diverges.
  * @note Adapted from Paul Mineiro's FastFloat
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float fastertanfullf(float x) {
   const int32_t k = (int32_t)(x * M_1_TWOPI);
   const float half = (x < 0) ? -0.5f : 0.5f;
@@ -633,7 +585,6 @@ float fastertanfullf(float x) {
 /** "Fast" log base 2 approximation, valid for positive x as precision allows.
  * @note Adapted from Paul Mineiro's FastFloat
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float fastlog2f(float x) {
   union { float f; uint32_t i; } vx = { x };
   union { uint32_t i; float f; } mx = { (vx.i & 0x007FFFFF) | 0x3f000000 };
@@ -648,7 +599,6 @@ float fastlog2f(float x) {
 /** "Faster" log base 2 approximation, valid for positive x as precision allows.
  * @note Adapted from Paul Mineiro's FastFloat
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float fasterlog2f(float x) {
   union { float f; uint32_t i; } vx = { x };
   float y = (float)(vx.i);
@@ -659,7 +609,6 @@ float fasterlog2f(float x) {
 /** "Fast" natural logarithm approximation, valid for positive x as precision allows.
  * @note Adapted from Paul Mineiro's FastFloat
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float fastlogf(float x) {
   return M_LN2 * fastlog2f(x);
 }
@@ -667,7 +616,6 @@ float fastlogf(float x) {
 /** "Fast" natural logarithm approximation, valid for positive x as precision allows.
  * @note Adapted from Paul Mineiro's FastFloat
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float fasterlogf(float x) {
   return M_LN2 * fasterlog2f(x);
 }
@@ -675,7 +623,6 @@ float fasterlogf(float x) {
 /** "Fast" power of 2 approximation, valid for x in [ -126, ... as precision allows.
  * @note Adapted from Paul Mineiro's FastFloat
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float fastpow2f(float p) {
   float clipp = (p < -126) ? -126.0f : p;
   int w = clipp;
@@ -690,7 +637,6 @@ float fastpow2f(float p) {
 /** "Faster" power of 2 approximation, valid for x in [ -126, ... as precision allows.
  * @note Adapted from Paul Mineiro's FastFloat
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float fasterpow2f(float p) {
   float clipp = (p < -126) ? -126.0f : p;
   union { uint32_t i; float f; } v = { (uint32_t)( (1 << 23) * (clipp + 126.94269504f) ) };
@@ -701,7 +647,6 @@ float fasterpow2f(float p) {
  * @note Adapted from Paul Mineiro's FastFloat
  * @note Warning: Seems to have divergent segments with discontinuities for some base/exponent combinations
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float fastpowf(float x, float p) {
   return fastpow2f(p * fastlog2f(x));
 }
@@ -709,7 +654,6 @@ float fastpowf(float x, float p) {
 /** "Faster" x to the power of p approximation
  * @note Adapted from Paul Mineiro's FastFloat
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float fasterpowf(float x, float p) {
   return fasterpow2f(p * fasterlog2f(x));
 }
@@ -717,7 +661,6 @@ float fasterpowf(float x, float p) {
 /** "Fast" exponential approximation, valid for x in [ ~ -87, ... as precision allows.
  * @note Adapted from Paul Mineiro's FastFloat
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float fastexpf(float p) {
   return fastpow2f(1.442695040f * p);
 }
@@ -725,7 +668,6 @@ float fastexpf(float p) {
 /** "Faster" exponential approximation, valid for x in [ ~ -87, ... as precision allows.
  * @note Adapted from Paul Mineiro's FastFloat
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float fasterexpf(float p) {
   return fasterpow2f(1.442695040f * p);
 }
@@ -735,7 +677,6 @@ float fasterexpf(float p) {
 /** atan2 approximation
  * @note Adapted from http://dspguru.com/dsp/tricks/fixed-point-atan2-with-self-normalization
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float fasteratan2f(float y, float x) {
   const float coeff_1 = M_PI_4;
   const float coeff_2 = 3 * coeff_1;
@@ -755,7 +696,6 @@ float fasteratan2f(float y, float x) {
 /** Hyperbolic tangent approximation
  * @note Adapted from http://math.stackexchange.com/questions/107292/rapid-approximation-of-tanhx
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float fastertanhf(float x) {
   return (-0.67436811832e-5f +
           (0.2468149110712040f +
@@ -768,7 +708,6 @@ float fastertanhf(float x) {
 /** Another Hyperbolic tangent approximation
  * @note Starts diverging from -1,1 beyond ~[-pi, pi]
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float fastertanh2f(float x) {
   const float xx = x * x;
   return x * (27.f + xx) / (27.f + 9.f * xx);
@@ -789,14 +728,12 @@ float fastertanh2f(float x) {
 /** Amplitude to dB 
  * @note Will remove low boundary check in future version
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float ampdbf(const float amp) {
   return (amp < 0.f) ? -999.f : 20.f*log10f(amp);
 }
 
 /** "Faster" Amplitude to dB
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float fasterampdbf(const float amp) {
   static const float c = 3.3219280948873626f; // 20.f / log2f(10);
   return c*fasterlog2f(amp);
@@ -804,14 +741,12 @@ float fasterampdbf(const float amp) {
 
 /** dB to ampltitude
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float dbampf(const float db) {
   return powf(10.f,0.05f*db);
 }
 
 /** "Faster" dB to ampltitude
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float fasterdbampf(const float db) {
   return fasterpowf(10.f, 0.05f*db);
 }
@@ -830,14 +765,12 @@ float fasterdbampf(const float db) {
 
 /** Linear interpolation
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float linintf(const float fr, const float x0, const float x1) {
   return x0 + fr * (x1 - x0);
 }
 
 /** Cosine interpolation
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 float cosintf(const float fr, const float x0, const float x1) {
   const float tmp = (1.f - fastercosfullf(fr * M_PI)) * 0.5f;
   return x0 + tmp * (x1 - x0);
diff --git a/platform/nts-1_mkii/common/utils/int_math.h b/platform/nts-1_mkii/common/utils/int_math.h
index ffae333..83cc91b 100644
--- a/platform/nts-1_mkii/common/utils/int_math.h
+++ b/platform/nts-1_mkii/common/utils/int_math.h
@@ -59,42 +59,36 @@
 
 /** Clip upper bound of signed integer x to m (inclusive)
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 int32_t clipmaxi32(const int32_t x, const int32_t m) {
   return (((x)>=m)?m:(x));
 }
 
 /** Clip lower bound of signed integer x to m (inclusive)
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 int32_t clipmini32(const int32_t  m, const int32_t x) {
   return (((x)<=m)?m:(x));
 }
 
 /** Clip signe integer x between min and max (inclusive)
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 int32_t clipminmaxi32(const int32_t min, const int32_t x, const int32_t max) {
   return (((x)>=max)?max:((x)<=min)?min:(x));
 }
 
 /** Clip upper bound of unsigned integer x to m (inclusive)
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 uint32_t clipmaxu32(const uint32_t x, const uint32_t m) {
   return (((x)>=m)?m:(x));
 }
 
 /** Clip lower bound of unsigned integer x to m (inclusive)
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 uint32_t clipminu32(const uint32_t  m, const uint32_t x) {
   return (((x)<=m)?m:(x));
 }
 
 /** Clip unsigned integer x between min and max (inclusive)
  */
-static inline __attribute__((optimize("Ofast"), always_inline))
 uint32_t clipminmaxu32(const uint32_t min, const uint32_t x, const uint32_t max) {
   return (((x)>=max)?max:((x)<=min)?min:(x));
 }
@@ -113,7 +107,6 @@ uint32_t clipminmaxu32(const uint32_t min, const uint32_t x, const uint32_t max)
 
 /** Compute next power of 2 greater than x
  */
-static inline __attribute__((always_inline))
 uint32_t nextpow2_u32(uint32_t x) {
   x--;
   x |= x>>1; x |= x>>2;
@@ -124,7 +117,6 @@ uint32_t nextpow2_u32(uint32_t x) {
 
 /** Check if x is a power of 2
  */
-static inline __attribute__((always_inline))
 uint8_t ispow2_u32(const uint32_t x) {
   return x && !(x & (x-1));
 }
