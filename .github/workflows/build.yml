name: Build

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
        token: ${{secrets.GITHUB_TOKEN}}

    - name: Cache gcc-arm-none-eabi
      id: cache-gcc-arm-none-eabi
      uses: actions/cache@v3
      with:
        path: ./toolchain
        key: ${{ runner.os }}-gcc-arm-none-eabi-10.3-2021.10

    - name: gcc-arm-none-eabi Toolchain Setup
      if: steps.cache-gcc-arm-none-eabi.outputs.cache-hit != 'true'
      run: |
        cd toolchain
        rm -Rf gcc-arm-none-eabi/
        wget https://developer.arm.com/-/media/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2
        tar xvf gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2
        rm gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2
        mv gcc-arm-none-eabi-10.3-2021.10 gcc-arm-none-eabi
        touch gcc-arm-none-eabi/EMPTY # for git

    - name: Rust Toolchain Setup
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        rustup target add thumbv7em-none-eabihf

    - name: Build logue-sdk
      run: |
        # workaround patch
        components/logue_bind/script/louge-sdk-remove-inline-patch.sh
        # build
        pushd components/logue_sdk_v2rs
        mkdir build && cd build
        cmake ..
        make

    - name: Build Sound unit (osc_waves)
      run: |
        # build
        WITH_LOGUE_SDK_BINDGEN=true cargo build --release --target=thumbv7em-none-eabihf
        # distribute
        cargo xtask dist

    - name: Valid Sound unit (osc_waves)
      run: |
        # check
        readelf -a dist/osc_waves.nts1mkiiunit
        toolchain/gcc-arm-none-eabi/bin/arm-none-eabi-objdump -d dist/osc_waves.nts1mkiiunit
        # size check
        [ $(stat -c%s "dist/osc_waves.nts1mkiiunit") -le 49000 ]
